{"version":3,"sources":["AddForm.js","Ninjas.js","App.js","serviceWorker.js","index.js"],"names":["AddForm","state","name","belt","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","console","log","props","addNinja","onSubmit","this","htmlFor","type","onChange","Component","ninjas","deleteNinja","ninjaList","map","ninja","className","key","onClick","App","idValue","next","filter","idGenerator","Ninjas","start","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAqCeA,E,2MAjCXC,MAAQ,CACJC,KAAO,KACPC,KAAO,M,EAGXC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAMH,EAAEE,OAAOE,S,EAKjCC,aAAe,SAACL,GACZA,EAAEM,iBACFC,QAAQC,IAAI,EAAKZ,OACjB,EAAKa,MAAMC,SAAX,eAAwB,EAAKd,S,wEAI7B,OACI,6BACI,0BAAMe,SAAUC,KAAKP,cACjB,2BAAOQ,QAAQ,QAAf,WACA,2BAAOV,GAAG,OAAOW,KAAK,OAAOC,SAAUH,KAAKb,eAC5C,2BAAOc,QAAQ,QAAf,WACA,2BAAOV,GAAG,OAAOW,KAAK,OAAOC,SAAUH,KAAKb,eAC5C,+C,GA3BEiB,aCEP,cAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YACjBC,EAAYF,EAAOG,KAAI,SAAAC,GACvB,OACI,yBAAKC,UAAU,QAAQC,IAAKF,EAAMlB,IAC9B,wCAAckB,EAAMxB,MACpB,wCAAcwB,EAAMvB,MACpB,4BAAQ0B,QAAS,WAAON,EAAYG,EAAMlB,MAA1C,cAIZ,OACI,yBAAKmB,UAAU,cACVH,ICuCEM,E,YA9Cb,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KAKRb,MAAS,CACP,KAAS,OACTqB,OAAQ,IARQ,EAkBlBP,SAAW,SAACW,GACVA,EAAMlB,GAAK,EAAKuB,QAAQC,OAAOvB,MAC/B,IAAIa,EAAM,sBAAO,EAAKrB,MAAMqB,QAAlB,CAA0BI,IACpC,EAAKpB,SAAS,CACZgB,OAASA,KAtBK,EA2BlBC,YAAc,SAACf,GACb,IAAIc,EAAS,EAAKrB,MAAMqB,OAAOW,QAAO,SAACP,GACrC,OAAOA,EAAMlB,KAAOA,KAEtB,EAAKF,SAAS,CACZgB,OAASA,KA9BX,EAAKS,QAAUD,EAAII,cAFH,E,sEAoChB,OACE,yBAAKP,UAAU,eACb,gDACA,kBAACQ,EAAD,CAAQb,OAAQL,KAAKhB,MAAMqB,OAAQC,YAAaN,KAAKM,cACrD,kBAAC,EAAD,CAASR,SAAUE,KAAKF,e,oIA7BVqB,E,+BAAM,E,+BAAQ,E,OAE9B,O,SAAMA,I,sEAfMf,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.042fbded.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass AddForm extends Component{\r\n    state = {\r\n        name : null,\r\n        belt : null\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState( {\r\n            [e.target.id]:  e.target.value\r\n            }\r\n        )\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        this.props.addNinja({...this.state});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor='name'> Name: </label>\r\n                    <input id='name' type='text' onChange={this.handleChange}></input>\r\n                    <label htmlFor='name'> Belt: </label>\r\n                    <input id='belt' type='text' onChange={this.handleChange}></input>\r\n                    <button>Subit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddForm;","import React from 'react';\r\n\r\n\r\n\r\n    \r\nexport default ({ninjas, deleteNinja}) => {\r\n    var ninjaList = ninjas.map(ninja => {\r\n        return (\r\n            <div className='ninja' key={ninja.id}>\r\n                <div> name : {ninja.name}</div>\r\n                <div> belt : {ninja.belt}</div>\r\n                <button onClick={() => {deleteNinja(ninja.id)}}>Delete</button>\r\n            </div>\r\n        )\r\n    });\r\n    return (\r\n        <div className='ninja-list'>\r\n            {ninjaList}\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './AddForm';\n\nimport Ninjas from './Ninjas';\nimport AddForm from './AddForm';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.idValue = App.idGenerator(); \n  }\n\n  \n  state =  {\n    'name' : 'Amar',\n    ninjas: []\n  }\n\n  static *idGenerator(start=0, step=1){\n    while(true){\n      yield start++;\n    }\n\n  }\n\n  addNinja = (ninja) => {\n    ninja.id = this.idValue.next().value;\n    var ninjas = [...this.state.ninjas, ninja];\n    this.setState({\n      ninjas : ninjas\n    });\n\n  }\n\n  deleteNinja = (id) => {\n    let ninjas = this.state.ninjas.filter((ninja) => {\n      return ninja.id !== id;\n    });\n    this.setState({\n      ninjas : ninjas \n    })\n  }\n  render() {\n    return (\n      <div className=\"app-content\">\n        <h1>Hello Ninjas!!!!</h1>\n        <Ninjas ninjas={this.state.ninjas} deleteNinja={this.deleteNinja}/>\n        <AddForm addNinja={this.addNinja}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}